âœ… Fundamentals
Graph Representation

Implement a graph using adjacency list.

Implement a graph using adjacency matrix.

Traversal

BFS traversal of a graph.

DFS traversal of a graph.

Detect if a path exists between two nodes (BFS/DFS).

ðŸ”„ Cycle Detection
Cycle Detection in Undirected Graph (Union-Find / DFS)

Cycle Detection in Directed Graph (DFS with recursion stack)

ðŸ“¶ Connected Components
Number of connected components in an undirected graph

Check if an undirected graph is a tree

Find the largest component in a graph

ðŸ“Š Topological Sort & DAG
Topological Sorting of a Directed Acyclic Graph (Kahnâ€™s Algorithm / DFS)

Detect cycle in a Directed Graph using topological sort

ðŸ§­ Shortest Paths
Dijkstra's Algorithm (Single Source Shortest Path)

Bellman-Ford Algorithm (Handles negative weights)

Floyd-Warshall Algorithm (All Pairs Shortest Paths)

ðŸ§± Minimum Spanning Tree
Prim's Algorithm

Kruskal's Algorithm using Union-Find

ðŸŒŠ Flood Fill / Matrix Problems
Number of islands (Leetcode 200)

Surrounded Regions (Leetcode 130)

Rotting Oranges (Leetcode 994)

Flood Fill (Leetcode 733)

Walls and Gates (Leetcode 286)

ðŸ“¦ Union-Find (Disjoint Set)
Find the redundant connection (Leetcode 684)

Accounts Merge (Leetcode 721)

Graph Valid Tree (Leetcode 261)

âš¡ Advanced / Harder Problems
Alien Dictionary (Topological Sort in disguised form)

Reconstruct Itinerary (Hierholzer's Algorithm - Leetcode 332)

Course Schedule I & II (Leetcode 207, 210)

Word Ladder I & II (Leetcode 127, 126)

Cheapest Flights Within K Stops (Leetcode 787)

Critical Connections in a Network (Tarjanâ€™s Algorithm - Leetcode 1192)

Clone Graph (Leetcode 133)




ðŸ§  Bonus Prep Tips
Practice using both DFS and BFS approaches.

Be confident with graph representation and edge cases like disconnected graphs, self-loops.

Know when to use Union-Find, Topological Sort, or Dijkstra.

Be comfortable with graph problems on grids (treated as graphs!).



BFS
DFS

Number of provinces (leetcode)
Connected Components Problem in Matrix
Rotten Oranges
Flood fill
Detect A cycle in Undirected Graph using BFS
Detect A cycle in Undirected Graph using DFS

0/1 Matrix (Bfs Problem)
Surrounded Regions (dfs)
Number of Enclaves [flood fill implementation - multisource]
Word ladder - 1
Word ladder - 2
Number of Distinct Islands [dfs multisource]
Bipartite Graph (DFS)
Cycle Detection in Directed Graph (DFS)



Topo Sort
Kahn's Algorithm
Cycle Detection in Directed Graph (BFS)
Course Schedule - I
Course Schedule - II
Find eventual safe states
Alien dictionary

Shortest Path in UG with unit weights
Shortest Path in DAG
Djisktra's Algorithm
Why priority Queue is used in Djisktra's Algorithm
Shortest path in a binary maze
Path with minimum effort
Cheapest flights within k stops
Network Delay time

Number of ways to arrive at destination
Minimum steps to reach end from start by performing multiplication and mod operations with array elements
Bellman Ford Algorithm
Floyd Warshal Algorithm
Find the city with the smallest number of neighbors in a threshold distance


Minimum Spanning Tree
Prim's Algorithm
Disjoint Set [Union by Rank]
Disjoint Set [Union by Size]
Kruskal's Algorithm
Number of operations to make network connected
Most stones removed with same rows or columns
Accounts merge
Number of island II
Making a Large Island
Swim in rising water
	

Bridges in Graph
Articulation Point
Kosaraju's Algorithm










